문제,보기1,보기2,보기3,보기4,정답,해설
"럼바우(Rumbaugh)의 객체지향 분석 절차를 가장 바르게 나열한 것은?","객체 모형 → 동적 모형 → 기능 모형","객체 모형 → 기능 모형 → 동적 모형","기능 모형 → 동적 모형 → 객체 모형","기능 모형 → 객체 모형 → 동적 모형",①,"객체지향 분석 방법론 중 럼바우(Rumbaugh)의 분석 절차는 '객체 모형(Object Model) → 동적 모형(Dynamic Model) → 기능 모형(Functional Model)'이 정답입니다."
"XP(eXtreme Programing)의 5가지 가치로 거리가 먼 것은?","용기","의사소통","정형 분석","피드백",③,"XP의 5가지 가치는 용기, 의사소통, 피드백, 존중, 단순성입니다. 정형 분석은 해당하지 않습니다."
"애자일 기법에 대한 설명으로 맞지 않은 것은?","절차와 도구보다 개인과 소통을 중요하게 생각한다.","계획에 중점을 두어 변경 대응이 난해하다.","소프트웨어가 잘 실행되는데 가치를 둔다.","고객과의 피드백을 중요하게 생각한다.",②,"애자일(Agile)은 변화 대응을 중요하게 여기며 계획에 중점을 두었다기보다 변화에 유연하게 대처하는 기법입니다."
"UML에서 활용되는 다이어그램 중 시스템의 동작을 표현하는 행위(Behavioral) 다이어그램에 해당하지 않는 것은?","유스케이스 다이어그램(Use Case Diagram)","시퀀스 다이어그램(Sequence Diagram)","활동 다이어그램(Activity Diagram)","배치 다이어그램(Deployment Diagram)",④,"행위(Behavioral) 다이어그램에는 유스케이스, 시퀀스, 활동 다이어그램이 포함됩니다. 배치 다이어그램은 구조(Structural) 다이어그램입니다."
"디자인 패턴 사용의 장·단점에 대한 설명으로 거리가 먼 것은?","소프트웨어 구조 파악이 용이하다.","객체지향 설계 및 구현의 생산성을 높이는데 적합하다.","재사용을 위한 개발 시간이 단축된다.","절차형 언어와 함께 이용될 때 효율이 극대화된다.",④,"디자인 패턴은 객체지향 언어에서 효율이 극대화되며, 절차형 언어와는 효율이 극대화되지 않습니다."
"클라이언트와 서버 간의 통신을 담당하는 시스템 소프트웨어를 무엇이라고 하는가?","웨어러블","하이웨어","미들웨어","응용 소프트웨어",③,"미들웨어(Middleware)는 클라이언트와 서버 간의 통신을 담당하는 소프트웨어입니다."
"CASE(Computer Aided Software Engineering)에 대한 설명으로 틀린 것은?","소프트웨어 모듈의 재사용성이 향상된다.","자동화된 기법을 통해 소프트웨어 품질이 향상된다.","소프트웨어 사용자들에게 사용 방법을 신속히 숙지시키기 위해 사용된다.","소프트웨어 유지보수를 간편하게 수행할 수 있다.",③,"CASE는 소프트웨어 개발과 품질 향상, 유지보수 지원에 관련되어 있지만, 사용자 교육을 위한 도구는 아닙니다."
"다음은 어떤 프로그램 구조를 나타낸다. 모듈 F에서의 fan-in과 fan-out의 수는 얼마인가?","fan-in : 2, fan-out : 3","fan-in : 3, fan-out : 2","fan-in : 1, fan-out : 2","fan-in : 2, fan-out : 1",②,"팬인(fan-in)은 해당 모듈에 들어오는(제어를 받는) 선의 수, 팬아웃(fan-out)은 모듈에서 나가는(제어하는) 선의 수를 말합니다. F에 들어오는 선이 3, 나가는 선이 2이므로 fan-in=3, fan-out=2입니다."
"요구사항 개발 프로세스의 순서로 옳은 것은?","도출 → 분석 → 명세 → 확인","도출 → 명세 → 분석 → 확인","도출 → 확인 → 분석 → 명세","도출 → 분석 → 확인 → 명세",①,"요구사항 개발 프로세스의 순서는 도출(Elicitation)→분석(Analysis)→명세(Specification)→확인(Validation)입니다."
"시스템의 구성 요소로 볼 수 없는 것은?","Process","Feedback","Maintenance","Control",③,"시스템의 구성 요소에는 Input, Process, Output, Control, Feedback이 있으며, Maintenance는 직접적인 구성 요소가 아닙니다."
"UML 모델에서 한 사물의 명세가 바뀌면 다른 사물에 영향을 주며, 일반적으로 한 클래스가 다른 클래스를 오퍼레이션의 매개 변수로 사용하는 경우에 나타나는 관계는?","Association","Dependency","Realization","Generalization",②,"의존(Dependency) 관계는 한 클래스가 다른 클래스의 변화를 의존하는, 즉 파라미터로 넘기는 등의 상황에서 나타나는 관계입니다."
"순차 다이어그램(Sequence Diagram)과 관련한 설명으로 틀린 것은?","객체들의 상호 작용을 나타내기 위해 사용한다.","시간의 흐름에 따라 객체들이 주고 받는 메시지의 전달 과정을 강조한다.","동적 다이어그램보다는 정적 다이어그램에 가깝다.","교류 다이어그램(Interaction Diagram)의 한 종류로 볼 수 있다.",③,"순차 다이어그램은 객체 간의 상호작용을 '시간의 흐름'에 따라 표현하는 동적 다이어그램에 해당합니다."
"User Interface 설계 시 오류 메시지나 경고에 관한 지침으로 가장 거리가 먼 것은?","메시지는 이해하기 쉬워야 한다.","오류로부터 회복을 위한 구체적인 설명이 제공되어야 한다.","오류로 인해 발생될 수 있는 부정적인 내용을 적극적으로 사용자들에게 알려야 한다.","소리나 색의 사용을 줄이고 텍스트로만 전달하도록 한다.",④,"메시지 표현에서 소리, 색 등도 효과적으로 사용할 수 있습니다. 텍스트만으로 제한하는 지침이 아닙니다."
"자료 흐름도(DFD)의 각 요소별 표기 형태의 연결이 옳지 않은 것은?","Process : 원","Data Flow : 화살표","Data Store : 삼각형","Terminator : 사각형",③,"자료 흐름도(DFD)에서 Data Store는 사각형(혹은 패러렐라인)으로 표기합니다. 삼각형이 아닙니다."
"정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?","Package Diagram","State Transition Diagram","Deployment Diagram","Entity-Relationship Diagram",④,"데이터베이스 설계의 표현에 사용하는 모델은 Entity-Relationship Diagram(ERD)입니다."
"디자인 패턴을 생성/구조/행동 패턴의 세 그룹으로 분류할 때, 구조 패턴이 아닌 것은?","Adapter 패턴","Bridge 패턴","Builder 패턴","Proxy 패턴",③,"Builder 패턴은 구조 패턴이 아니라 생성(Creational) 패턴입니다."
"모바일 기기에서 사용하는 NUI(Natural User Interface) 인터페이스에 속하지 않는 것은?","Pinch","Press","Flow","Flick",③,"Flow는 NUI에 해당하지 않습니다. Pinch, Press, Flick 등은 터치 기반 NUI 동작입니다."
"소프트웨어 공학에서 워크스루(Walkthrough)에 대한 설명으로 틀린 것은?","사용사례를 확장하여 명세하거나 설계 다이어그램, 원시코드, 테스트 케이스 등에 적용할 수 있다.","복잡한 알고리즘 또는 반복, 실시간 동작, 병행 처리와 같은 기능이나 동작을 이해하려고 할 때 유용하다.","인스펙션(Inspection)과 동일한 의미를 가진다.","단순한 테스트 케이스를 이용하여 프로덕트를 수작업으로 수행해 보는 것이다.",③,"워크스루(Walkthrough)와 인스펙션(Inspection)은 서로 구분되는 검토 기법입니다."
"다음 내용이 설명하는 객체지향 설계 원칙은?  
ㆍ클라이언트는 자신이 사용하지 않는 메소드와 의존관계를 맺으면 안 된다.  
ㆍ클라이언트가 사용하지 않는 인터페이스 때문에 영향을 받아서는 안 된다.","인터페이스 분리 원칙","단일 책임 원칙","개방 폐쇄의 원칙","리스코프 교체의 원칙",①,"클라이언트가 사용하지 않는 인터페이스에 영향을 받지 않게 하라는 원칙은 '인터페이스 분리 원칙(ISP)'입니다."
"HIPO(Hierarchy Input Process Output)에 대한 설명으로 거리가 먼 것은?","상향식 소프트웨어 개발을 위한 문서화 도구이다.","차트 종류에는 가시적 도표, 총체적 도표, 세부적 도표가 있다.","기능과 자료의 의존 관계를 동시에 표현할 수 있다.","보기 쉽고 이해하기 쉽다.",①,"HIPO는 하향식(Top-Down) 소프트웨어 개발 및 문서화를 위한 도구입니다."
